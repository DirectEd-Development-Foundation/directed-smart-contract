import {
  Data,
  Constr,
  Lucid,
  Blockfrost,
  getAddressDetails,
  MintingPolicy,
  TxHash,
  UTxO,
  Address,
  AddressDetails,
  Unit,
  PolicyId,
  SpendingValidator,
} from "https://deno.land/x/lucid@0.10.6/mod.ts"

import { secretSeed } from "./seed.ts"

// set blockfrost endpoint
const lucid = await Lucid.new(
    new Blockfrost(
      "https://cardano-preview.blockfrost.io/api/v0",
      "previewRotaZGxMOMhVbiBSAciY5fRcPllSBJ8T"
    ),
    "Preview"
  );

// load local stored seed into lucid and read out 5 addresses (for the full flow).
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 0 });
const addr0: Address = await lucid.wallet.address();
console.log("Address for wallet 0 (Authority): " + addr0);
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 1 });
const addr1: Address = await lucid.wallet.address();
console.log("Address for wallet 1 (School): " + addr1);
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 2 });
const addr2: Address = await lucid.wallet.address();
console.log("Address for wallet 2 (CP):: " + addr2);
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 3 });
const addr3: Address = await lucid.wallet.address();
console.log("Address for wallet 3 (Donor):: " + addr3);
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 4 });
const addr4: Address = await lucid.wallet.address();
console.log("Address for wallet 4 (Student):: " + addr4);

// get the pubkeyhashes (used with writeScripts to generate script Addresses currently)
const details0: AddressDetails = getAddressDetails(addr0);
const PKH0: string = details0.paymentCredential.hash
console.log("PKH for wallet 0 (Authority): " + PKH0);
const details1: AddressDetails = getAddressDetails(addr1);
const PKH1: string = details1.paymentCredential.hash
console.log("PKH for wallet 1 (School): " + PKH1);
const details2: AddressDetails = getAddressDetails(addr2);
const PKH2: string = details2.paymentCredential.hash
console.log("PKH for wallet 2 (CP): " + PKH2);
const details3: AddressDetails = getAddressDetails(addr3);
const PKH3: string = details3.paymentCredential.hash
console.log("PKH for wallet 3 (Donor): " + PKH3);
const details4: AddressDetails = getAddressDetails(addr4);
const PKH4: string = details4.paymentCredential.hash
console.log("PKH for wallet 4 (Student): " + PKH4);

// Define the authToken plutus script
const authTokenScript: MintingPolicy = {
  type: "PlutusV2",
  script: "590a37590a340100003323322332232323232323232323232323232332232323232323232323232222323253353232323233355300b120013233500d223335003220020020013500122001123300122533500210011028027235001223225335333573466e20005200002b02a102b15335333573466e24005200002a02b1533553353235001222222222222533533355301d12001501c25335333573466e3c0700040e40e04d40a00045409c010840e440dd401c40ac4cd5ce2481196e6f74207369676e656420627920696e737469747574696f6e0002a153355335533533355301012001500f25335333573466e24c8c8c8c00400cc8004d540bc88cd400520002235002225335333573466e3c00801c0d00cc4c02c0044c01800d4020d4004888800d200002b02c13501b0011501a35500722222222222200a21353500122220042233500223501e0012501d1501921333573466e3c0100040b00ac40a840ac4cd5ce24811a6d7573742073656e6420746f2073706563696669656420706b680002a102a102a3200135502a223350014800088d4008894cd4ccd5cd19b8f00200702f02e10011300600333355300d120012253353500222232333573466e3c0100040b00ad40184cd409400800440054090c8cc0894094004d540088888888888880204d4cccd4d40088800498848c004008989880044d400488008cccd5cd19b8735573aa0069000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233501a01b35742a01866a0340366ae85402ccd4068070d5d0a805199aa80f3ae501d35742a012666aa03ceb94074d5d0a80419a80d0129aba150073335501e02675a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233503075a6ae854008c0c4d5d09aba2500223263203333573806806606226aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a060eb4d5d0a80118189aba135744a004464c6406666ae700d00cc0c44d55cf280089baa001357426ae8940088c98c80bccd5ce01801781689aab9e5001137540026ae854014cd4069d71aba150043335501e022200135742a006666aa03ceb88004d5d0a80118121aba135744a004464c6405666ae700b00ac0a44d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a801980a1aba135744a006464c6403a66ae7007807406ccccd5cd19b8735573a6ea80112000201c23263201c33573803a0380342036264c6403666ae712401035054350001b135573ca00226ea80044cd4008894cd40088400c40054028c8004d5407088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448848cc00400c008c8004d5406888448894cd40044008884cc014008ccd54c01c4800401401000448c88c008dd6000990009aa80d111999aab9f0012501a233501930043574200460066ae880080508c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00a80a00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8064cd5ce00d00c80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007006c06406005c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201533573802c02a02626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a030466a02e66442466002006004600c6aae754008c014d55cf280118021aba200301213574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01301201000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01101000e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00d00c00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c240029201035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020014891c85d9efa7117df5a2c8acf8152fa74904344e022f06a3f26d48b0280e0001",
};
const authTokenAddress: Address = lucid.utils.validatorToAddress(authTokenScript);
const authTokenPolicyID: PolicyId = lucid.utils.mintingPolicyToId(authTokenScript);

// Define the schoolToken plutus script
const schoolTokenScript: MintingPolicy = {
  type: "PlutusV2",
  script: "590a37590a340100003323322332232323232323232323232323232332232323232323232323232222323253353232323233355300b120013233500d223335003220020020013500122001123300122533500210011028027235001223225335333573466e20005200002b02a102b15335333573466e24005200002a02b1533553353235001222222222222533533355301d12001501c25335333573466e3c0700040e40e04d40a00045409c010840e440dd401c40ac4cd5ce2481196e6f74207369676e656420627920696e737469747574696f6e0002a153355335533533355301012001500f25335333573466e24c8c8c8c00400cc8004d540bc88cd400520002235002225335333573466e3c00801c0d00cc4c02c0044c01800d4020d4004888800d200002b02c13501b0011501a35500722222222222200a21353500122220042233500223501e0012501d1501921333573466e3c0100040b00ac40a840ac4cd5ce24811a6d7573742073656e6420746f2073706563696669656420706b680002a102a102a3200135502a223350014800088d4008894cd4ccd5cd19b8f00200702f02e10011300600333355300d120012253353500222232333573466e3c0100040b00ad40184cd409400800440054090c8cc0894094004d540088888888888880204d4cccd4d40088800498848c004008989880044d400488008cccd5cd19b8735573aa0069000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233501a01b35742a01866a0340366ae85402ccd4068070d5d0a805199aa80f3ae501d35742a012666aa03ceb94074d5d0a80419a80d0129aba150073335501e02675a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233503075a6ae854008c0c4d5d09aba2500223263203333573806806606226aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a060eb4d5d0a80118189aba135744a004464c6406666ae700d00cc0c44d55cf280089baa001357426ae8940088c98c80bccd5ce01801781689aab9e5001137540026ae854014cd4069d71aba150043335501e022200135742a006666aa03ceb88004d5d0a80118121aba135744a004464c6405666ae700b00ac0a44d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a801980a1aba135744a006464c6403a66ae7007807406ccccd5cd19b8735573a6ea80112000201c23263201c33573803a0380342036264c6403666ae712401035054350001b135573ca00226ea80044cd4008894cd40088400c40054028c8004d5407088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448848cc00400c008c8004d5406888448894cd40044008884cc014008ccd54c01c4800401401000448c88c008dd6000990009aa80d111999aab9f0012501a233501930043574200460066ae880080508c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00a80a00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8064cd5ce00d00c80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007006c06406005c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201533573802c02a02626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a030466a02e66442466002006004600c6aae754008c014d55cf280118021aba200301213574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01301201000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01101000e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00d00c00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c240029201035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020014891c12cffb45b4187c7d2c7c650e4907300cb7aaf292556145e0773ad0530001",
};
const schoolTokenAddress: Address = lucid.utils.validatorToAddress(schoolTokenScript);
const schoolTokenPolicyID: PolicyId = lucid.utils.mintingPolicyToId(schoolTokenScript);

// Define the CPToken plutus script
const CPTokenScript: MintingPolicy = {
  type: "PlutusV2",
  script: "590a71590a6e0100003323322332232323232323232323232323232332232323232323232323232222323253353232323233355300b120013233500d223335003220020020013500122001123300122533500210011028027235001223225335333573466e20005200002b02a102b15335333573466e24005200002a02b1533553353235001222222222222533533355301d12001501c25335333573466e3c0700040e40e04d40a00045409c010840e440dd401c40ac4cd5ce2481196e6f74207369676e656420627920696e737469747574696f6e0002a1533553355335533533355301012001500f25335333573466e24c8c8c8c00400cc8004d540bc88cd400520002235002225335333573466e3c00801c0d00cc4c02c0044c01800d4020d4004888800d200002b02c13501b0011501a35500722222222222200a21353500122220042233500223501e0012501d1501921333573466e3cccdc624004901c00200081601588150815899ab9c4911a6d7573742073656e6420746f2073706563696669656420706b680002a15335333573466e1cdc6801a40740560542056266ae71240113696e636f727265637420746e206c656e6774680002a102a102a102a3200135502a223350014800088d4008894cd4ccd5cd19b8f00200702f02e10011300600333355300d120012253353500222232333573466e3c0100040b00ad40184cd409400800440054090c8cc0894094004d540088888888888880204d4cccd4d40088800498848c004008989880044d400488008cccd5cd19b8735573aa0069000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233501a01b35742a01866a0340366ae85402ccd4068070d5d0a805199aa80f3ae501d35742a012666aa03ceb94074d5d0a80419a80d0129aba150073335501e02675a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233503075a6ae854008c0c4d5d09aba2500223263203333573806806606226aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a060eb4d5d0a80118189aba135744a004464c6406666ae700d00cc0c44d55cf280089baa001357426ae8940088c98c80bccd5ce01801781689aab9e5001137540026ae854014cd4069d71aba150043335501e022200135742a006666aa03ceb88004d5d0a80118121aba135744a004464c6405666ae700b00ac0a44d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a801980a1aba135744a006464c6403a66ae7007807406ccccd5cd19b8735573a6ea80112000201c23263201c33573803a0380342036264c6403666ae712401035054350001b135573ca00226ea80044cd4008894cd40088400c40054028c8004d5407088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448848cc00400c008c8004d5406888448894cd40044008884cc014008ccd54c01c4800401401000448c88c008dd6000990009aa80d111999aab9f0012501a233501930043574200460066ae880080508c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00a80a00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8064cd5ce00d00c80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007006c06406005c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201533573802c02a02626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a030466a02e66442466002006004600c6aae754008c014d55cf280118021aba200301213574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01301201000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01101000e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00d00c00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c240029201035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020014891c1c01d272b2805399427b08c19b1f2c396a3a4cbfa9f432223a796dae0001",
};
const CPTokenAddress: Address = lucid.utils.validatorToAddress(CPTokenScript);
const CPTokenPolicyID: PolicyId = lucid.utils.mintingPolicyToId(CPTokenScript);

// Define the Pooling Script
const poolScript: SpendingValidator = {
  type: "PlutusV2",
  script: "",
};
const poolScriptAddress: Address = lucid.utils.validatorToAddress(poolScript);

// Define the Scholarship Script
const scholScript: SpendingValidator = {
  type: "PlutusV2",
  script: "590f99590f96010000332323232323322323232332232332232323232323232332232323232323232323232323232323232323232322232322322323253353332223235004223253350061533533029500435010222222222009103713357389211e526566756e64206e6f74207369676e656420627920617574686f726974790003615335333573466e20cdc0001240046a02044444444400406e06c2a66aa66a66052a008006206e266ae71241174e6f74207369676e656420627920726563697069656e74000361533553355001103713357389211a4d696c6573746f6e6520746f6b656e206e6f74206275726e6564000361533553355335302a00521350333535001220012222003150312153355335302b0062135001223500122223500d223500222222222222233355303a120012235002222253353501822350062232335005233500425335333573466e3c0080041681645400c416481648cd4010816494cd4ccd5cd19b8f00200105a059150031059153350032153350022133500223350022335002233500223304e002001205c2335002205c23304e00200122205c222335004205c2225335333573466e1c01800c17c17854cd4ccd5cd19b8700500205f05e13305b004001105e105e105715335001210571057133504a0060051005504500a1326320213357389201024c660002110372215335001153355335323253335002153335001103c2103c2103c2153335002103c21333573466ebc0080040f80f4840f4854ccd400840f0840f484cc0bc008004d400c8888008c0bcc8d400488cdd2a400066ae80dd480119aba037500026ec4094cc0f4018cdc0002a40042074266ae712411e696e636f727265637420646174756d2c206f72206e6f7420696e6c696e6500039153353232333553032120013503d503a235001223335530351200135040503d23500122333500123303f4800000488cc1000080048cc0fc005200000133027002001323355302c120012350012233550330023355302f1200123500122335503600233350012330474800000488cc1200080048cc11c005200000133027005001323355302c120012350012233550330023355302f1200123500122335503600233704900080080080099a81919aa81781c19a81919aa81781c19b83350142222222220033501422222222200250335033350022222003103a133573892010f696e636f72726563742076616c756500039103922103b103610371335738920122646f65736e27742077697468647261772066756e64696e6720636f72726563746c79000361036103615335333573466e1ccdc0001240046a02044444444400406e06c2a66aa66a66052a008006206e266ae71241174e6f74207369676e656420627920726563697069656e7400036153355001103713357389211a4d696c6573746f6e6520746f6b656e206e6f74206275726e656400036103610361333573466e1cc8c8c8c8c8c004014c8004d540fc88cd400520002235002225335333573466e3c0080241000fc4c01c0044c01800cc8004d540f888cd400520002235002225335333573466e3c00801c0fc0f840044c01800ccdc58018021a8081111111110021aa8019111111111110042400206c06a26a002440046666ae68cdc39aab9d5007480008cc0d0dd71aba15007375a6ae84d5d1280391931900d19ab9c01b01a0183333573466e1cd55cea80224000460306ae84d55cf280291931900d19ab9c01b01a0183333573466e1cd55cea80124000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4064068d5d0a80619a80c80d1aba1500b33501901b35742a014666aa03aeb94070d5d0a804999aa80ebae501c35742a01066a0320446ae85401cccd5407408dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01881801709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03103002e135573ca00226ea8004d5d09aba2500223263202c33573805a05805426aae7940044dd50009aba1500533501975c6ae854010ccd5407407c8004d5d0a801999aa80ebae200135742a00460426ae84d5d1280111931901419ab9c029028026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00460226ae84d5d1280111931900d19ab9c01b01a018101913263201933573892010350543500019135573ca00226ea80044dd500089aab9e5001137540022464460046eb0004c8004d540b088cccd55cf80092811119a81098021aba1002300335744004024464646666ae68cdc39aab9d5002480008cc8848cc00400c008c028d5d0a80118029aba135744a004464c6402466ae7004c0480404d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008c04cd5d0a80119a8068091aba135744a004464c6402e66ae7006005c0544d55cf280089baa00135742a008666aa010eb9401cd5d0a8019919191999ab9a3370ea0029002118119aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201933573803403202e02c02a26aae7540044dd50009aba1500233500975c6ae84d5d1280111931900999ab9c014013011135744a00226ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa81491191999aab9f00225020233501f335501c300635573aa004600a6aae794008c010d5d100180809aba100112232323333573466e1d400520002350213005357426aae79400c8cccd5cd19b87500248008940848c98c8040cd5ce00880800700689aab9d500113754002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c8040cd5ce00880800700680600589aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c8030cd5ce00680600509aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401466ae7002c0280204dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402666ae7005004c04404003c03803403002c4d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200c33573801a01801401226aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900499ab9c00a009007006135573aa00226ea8004488c8c8cccd5cd19b87500148010848880048cccd5cd19b875002480088c84888c00c010c018d5d09aab9e500423333573466e1d400d20002122200223263200a33573801601401000e00c26aae7540044dd50009191999ab9a3370ea0029001100e11999ab9a3370ea0049000100e11931900319ab9c007006004003135573a6ea80052612001491035054310022335530071200123500122335500e002333500123355300b1200123500122335501200235500d0010012233355500800d00200123355300b1200123500122335501200235500c00100133355500300800200111122233355300412001500e335530071200123500122335500e002355009001333553004120012235002225335333553011120013233501e2233350032200200200135001220011233001225335002101e100101b235001223300a00200500610031335012004003500f00133553007120012350012232335500f00330010053200135501f225335001135500a003221350022253353300c002008112223300200a0041300600300232001355018221122253350011002221330050023335530071200100500400111212223003004112122230010043200135501522112253350011500c22133500d3004002335530061200100400122333573466e3c00800404404088d40088888888888894cd4ccd54c04848005405494cd4ccd5cd19b8f00e00101d01c135018001150170042101d101b23500122350022222222222223333500d25017250172501723335530131200150162350012253355335333573466e3cd400888008d40108800808007c4ccd5cd19b873500222001350042200102001f101f13501b0031501a00d112212330010030022122230020043200135500f221122253350011350032200122133350052200230040023335530071200100500400111220021221223300100400313350092253350022100310015001121223002003112200122333573466e1c008004018015220100112330012253350021001100400312200212200112335002223335003220020020013500122001122123300100300222123300100300222337000040022246460020024466006600400400266a2446666666660049111c85d9efa7117df5a2c8acf8152fa74904344e022f06a3f26d48b0280e0048811cb0a40aef423cfe3d56796536214216657046f05ff62307f15e6cad8a0048811c12cffb45b4187c7d2c7c650e4907300cb7aaf292556145e0773ad0530048811c368372cc013036b30067f3f69b1b23e61928a8d503508c41771ddc650048811c1c01d272b2805399427b08c19b1f2c396a3a4cbfa9f432223a796dae0048811c216da5a71a76deb2c408773a512f08877bc34f4f0e742502ba915f5e004820212bd7d200448203da83743088888888848ccccccccc00402802402001c01801401000c0088005",
};
const scholScriptAddress: Address = lucid.utils.validatorToAddress(scholScript);

export async function mintAuthToken(
  details: AddressDetails,
): Promise<TxHash> {
  const PKH: string = details.paymentCredential.hash;
  const address : Address = details.address.bech32;
  const unit: Unit = authTokenPolicyID + PKH;

  const tx = await lucid
    .newTx()
    .mintAssets({ [unit]: 1n }, Data.void())
    .validTo(Date.now() + 100000)
    .attachMintingPolicy(authTokenScript)
    .payToAddress(address , { [unit]: 1n })
    .addSignerKey(PKH0)
    .complete();

  const signedTx = await tx.sign().complete();

  const txHash = await signedTx.submit();

  return txHash;
}

export async function mintSchoolToken(
  details: AddressDetails,
): Promise<TxHash> {
  const PKH: string = details.paymentCredential.hash;
  const address : Address = details.address.bech32;
  const unit: Unit = schoolTokenPolicyID + PKH;

  const tx = await lucid
    .newTx()
    .mintAssets({ [unit]: 1n }, Data.void())
    .validTo(Date.now() + 100000)
    .attachMintingPolicy(schoolTokenScript)
    .payToAddress(address , { [unit]: 1n })
    .addSignerKey(PKH1)
    .complete();

  const signedTx = await tx.sign().complete();

  const txHash = await signedTx.submit();

  return txHash;
}

/**
 * 
 * @param pkh 
 * @param milestone 
 * @returns The unit for the milestone token, where the milestone number has been converted to a 2-digit hex so that it will be represented as a single byte in plutus core.
 */
export function milestoneTokenUnit(
  pkh: string,
  milestone: bigint,
): string {
  const milestoneHex : string = milestone.toString(16)
  var milestoneByteHex : string = milestoneHex
  if (milestoneHex.length == 1) {
    milestoneByteHex = "0" + milestoneHex
  }
  if (milestoneHex.length > 2) {
    throw new Error("Milestones must be between 0 and 255 so they fit in a single byte");
    
  }
  const unit: Unit = CPTokenPolicyID + milestoneByteHex + pkh;
  return unit
}

// Milestones can only be from 0 to 255, since they must fit in a single byte.
export async function mintMilestoneToken(
  details: AddressDetails,
  milestone: bigint,
): Promise<TxHash> {
  const PKH: string = details.paymentCredential.hash;
  const address : Address = details.address.bech32;
  const unit = milestoneTokenUnit(PKH,milestone)

  const tx = await lucid
    .newTx()
    .mintAssets({ [unit]: 1n }, Data.void())
    .validTo(Date.now() + 100000)
    .attachMintingPolicy(CPTokenScript)
    .payToAddress(address , { [unit]: 1n })
    .addSignerKey(PKH2)
    .complete();

  const signedTx = await tx.sign().complete();

  const txHash = await signedTx.submit();

  return txHash;
}

export async function donateToPool(
  lovelace: bigint,
): Promise<TxHash> {

  const tx = await lucid
    .newTx()
    .payToContract(poolScriptAddress, { inline : Data.void() }, { 'lovelace': lovelace } )
    .validTo(Date.now() + 100000)
    .complete();
  
  const signedTx = await tx.sign().complete();

  const txHash = await signedTx.submit();

  return txHash;
}

// Type definition could be auto generated from on-chain script
const ScholDatumSchema = Data.Object({
  pkh: Data.Bytes(),
  milestone: Data.Integer(),
});

type ScholDatum = Data.Static<typeof ScholDatumSchema>;
const ScholDatum = ScholDatumSchema as unknown as ScholDatum;

export async function initialiseOwnScholarship() : Promise<TxHash> {
  const addr: Address = await lucid.wallet.address();
  const details: AddressDetails = getAddressDetails(addr);
  const PKH: string = details.paymentCredential.hash;
  const datum: ScholDatum = {
    pkh: PKH,
    milestone: 0n,
  };
  const authTokenUnit : Unit = authTokenPolicyID + PKH;
  const schoolTokenUnit : Unit = schoolTokenPolicyID + PKH;
  const lovelaceForSchol : bigint = 100000000n

  const utxoAtScript: UTxO[] = await lucid.utxosAt(poolScriptAddress);
  if( utxoAtScript && utxoAtScript.length > 0) {
    for (var UTxOStack: UTxO[] = [], acc: bigint = 0n, index = 0;
      acc < lovelaceForSchol + 2000000n && index < utxoAtScript.length;
      index ++, acc += (utxoAtScript[index].assets)['lovelace']) {  // What if there are other tokens in here??)  
       UTxOStack.push(utxoAtScript[index])
      } 

    if (UTxOStack.length > 0 && acc >= lovelaceForSchol + 2000000n) {
      const tx = await lucid
        .newTx()
        .mintAssets({ [authTokenUnit]: -1n }, Data.void())
        .mintAssets({ [schoolTokenUnit]: -1n }, Data.void())
        .validTo(Date.now() + 100000)
        .attachMintingPolicy(authTokenScript)
        .attachMintingPolicy(schoolTokenScript)
        .payToContract(scholScriptAddress, { inline : Data.to(datum,ScholDatum) }, { 'lovelace': lovelaceForSchol })
        .collectFrom(UTxOStack, Data.to(PKH)) 
        .attachSpendingValidator(poolScript)
        .payToContract(poolScriptAddress, { inline : Data.void() }, { 'lovelace': acc - lovelaceForSchol })
        .complete();

      const signedTx = await tx.sign().complete();

      const txHash = await signedTx.submit();
    
      return txHash;
    }
    else return "Insufficient funds in pooling script"
  }
  else return "No UTxOs found at script."
}

export async function completeMilestone(
  milestone : bigint,
) : Promise<TxHash> {
  const addr: Address = await lucid.wallet.address();
  const details: AddressDetails = getAddressDetails(addr);
  const PKH: string = details.paymentCredential.hash;
  const prevDatum: ScholDatum = {
    pkh: PKH,
    milestone: milestone-1n,
  };
  const datum: ScholDatum = {
    pkh: PKH,
    milestone: milestone,
  };
  const lovelaceForSchol : bigint = 100000000n;
  const totalMilestones : bigint = 2n;

  const utxoAtScript: UTxO[] = await lucid.utxosAt(scholScriptAddress);

  console.log('UTxOs at Scholarship Script')
  console.log(utxoAtScript)

  const ourUTxO: UTxO = utxoAtScript.find((utxo) => utxo.datum == Data.to(prevDatum,ScholDatum));

  if ( ourUTxO ) {
    if ( milestone < totalMilestones ) {
      var tx = await lucid
      .newTx()
      .mintAssets({ [milestoneTokenUnit(PKH,milestone)]: -1n }, Data.void())
      .attachMintingPolicy(CPTokenScript)
      .validTo(Date.now() + 100000)
      .collectFrom([ourUTxO], Data.to(new Constr(0,[new Constr(0,[])]))) // I took this from the plutus.json file. How can I do this from false/true instead?
      .attachSpendingValidator(scholScript)
      .addSignerKey(PKH)
      .payToContract(scholScriptAddress, { inline : Data.to(datum,ScholDatum) }, { 'lovelace': lovelaceForSchol * (totalMilestones - milestone) / totalMilestones })
      .complete();
    }
    else {
      var tx = await lucid
      .newTx()
      .mintAssets({ [milestoneTokenUnit(PKH,milestone)]: -1n }, Data.void())
      .attachMintingPolicy(CPTokenScript)
      .validTo(Date.now() + 100000)
      .collectFrom([ourUTxO], Data.to(new Constr(0,[new Constr(0,[])]))) // I took this from the plutus.json file. How can I do this from false/true instead?
      .attachSpendingValidator(scholScript)
      .addSignerKey(PKH)
      .complete();
    }

    const signedTx = await tx.sign().complete();

    const txHash = await signedTx.submit();
  
    return txHash;
  }
  else return "No UTxO found matching your scholarship details"

}

export async function authorityEmergencyRefund(
  studentPkh: string, milestone : bigint,
) : Promise<TxHash> {

  const datum: ScholDatum = {
    pkh: studentPkh,
    milestone: milestone,
  };

  const utxoAtScript: UTxO[] = await lucid.utxosAt(scholScriptAddress);

  console.log('UTxOs at Scholarship Script')
  console.log(utxoAtScript)

  const ourUTxO: UTxO = utxoAtScript.find((utxo) => utxo.datum == Data.to(datum,ScholDatum));

  if ( ourUTxO ) {
    var tx = await lucid
    .newTx()
    .validTo(Date.now() + 100000)
    .collectFrom([ourUTxO], Data.to(new Constr(0,[new Constr(1,[])]))) // I took this from the plutus.json file. How can I do this from false/true instead?
    .attachSpendingValidator(scholScript)
    .addSignerKey(PKH0)
    .complete();

    const signedTx = await tx.sign().complete();

    const txHash = await signedTx.submit();
  
    return txHash;
  }
  else return "No UTxO found matching your scholarship details"

}

// Log all account utxo lists. 
// console.log(await lucid.utxosAt(addr0));
// console.log(await lucid.utxosAt(addr1));
// console.log(await lucid.utxosAt(addr2));
// console.log(await lucid.utxosAt(addr3));
// console.log(await lucid.utxosAt(addr4));

// Mint and send authority token
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 0 });
// console.log(await mintAuthToken(details4));

// Mint and send school token
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 1 });
// console.log(await mintSchoolToken(details4));

// Donate 102 Ada to PoolScript
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 3})
// console.log(await donateToPool(102000000n))

// Initialize Scholarship Using Pool Funds
lucid.selectWalletFromSeed(secretSeed, { accountIndex: 4})
console.log(await initialiseOwnScholarship())

// Mint and send milestone token
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 2 });
// console.log(await mintMilestoneToken(details4,1));

// Complete Milestone 1 and withdraw funding
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 4})
// console.log(await completeMilestone(1n))

// Mint and send milestone token
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 2 });
// console.log(await mintMilestoneToken(details4,2));

// Complete Milestone 1 and withdraw funding
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 4})
// console.log(await completeMilestone(2n))




// Authority Emergency Refund of a Scholarship
// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 0})
// console.log(await authorityEmergencyRefund(PKH4, 0n))
